import os
import random
import time
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

def derive_key(password: str, salt: bytes):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô """
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())

def generate_fake_fbx(length):
    """ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ Header ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå FBX """
    header = b'Kaydara FBX Binary  '
    fake_data = os.urandom(length - len(header))
    return header + fake_data

def encrypt_honey(input_file, output_file, password):
    """ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö Honey Encryption (‡πÑ‡∏°‡πà‡∏°‡∏µ ChaCha20) """
    start_time = time.time()
    
    salt = os.urandom(16)
    key = derive_key(password, salt)

    with open(input_file, "rb") as f:
        plaintext = f.read()

    # üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏° 4 ‡∏≠‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏ú‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á
    fake_ciphertexts = [generate_fake_fbx(len(plaintext)) for _ in range(4)]
    all_ciphertexts = fake_ciphertexts + [plaintext]
    random.shuffle(all_ciphertexts)

    # üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    with open(output_file, "wb") as f:
        f.write(salt + b''.join(all_ciphertexts))
    
    elapsed_time = time.time() - start_time
    print(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {output_file}")
    print(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™: {elapsed_time:.6f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

def decrypt_honey(encrypted_file, output_file, password):
    """ ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ö‡∏ö Honey Encryption """
    start_time = time.time()
    
    with open(encrypted_file, "rb") as f:
        data = f.read()

    salt = data[:16]
    honey_ciphertexts = [data[i:i+len(data[16:])//5] for i in range(16, len(data), len(data[16:])//5)]

    key = derive_key(password, salt)
    
    for candidate in honey_ciphertexts:
        if candidate.startswith(b'Kaydara FBX Binary  '):  # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Header ‡πÑ‡∏ü‡∏•‡πå FBX
            decrypted_data = candidate
            break
    else:
        decrypted_data = random.choice(honey_ciphertexts)  # üîπ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
    
    with open(output_file, "wb") as f:
        f.write(decrypted_data)
    
    elapsed_time = time.time() - start_time
    print(f"‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {output_file}")
    print(f"‚è≥ ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™: {elapsed_time:.6f} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")

# üîπ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
encrypt_honey("sid_costume_basic.fbx", "model_sid_encrypted.bin", "mypassword123")
decrypt_honey("model_sid_encrypted.bin", "model_sid_decrypted.fbx", "mypassword1234")  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡∏¥‡∏î
